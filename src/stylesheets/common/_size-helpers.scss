@charset "utf-8";

// Source: https://www.degordian.com/education/blog/best-practice-for-responsive-typography/

// unitless function to convert px to em
@function em($pixels, $context: $browser-context) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }
  @if (unitless($context)) {
    $context: $context * 1px;
  }
  @return $pixels / $context * 1em;
}

// unitless function to convert px to rem
@function rem($pixels, $context: $browser-context) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }
  @if (unitless($context)) {
    $context: $context * 1px;
  }
  @return $pixels / $context * 1rem;
}

// breakpoint mixin
@mixin breakpoint($mq01: 0, $mq2: false, $maxmin: max-width) {
  @if $mq2 == false {
    @media ($maxmin: $mq01) {
      @content;
    }
  }
  @else {
    @media (min-width: $mq01) and (max-width: $mq2) {
      @content;
    }
  }
}

@mixin responsive-property($property, $value-map) {
  @each $breakpoint, $value in $value-map {
    @if $breakpoint == null {
      #{$property}: $value;
    } @else {
      @include breakpoint($breakpoint) {
        #{$property}: $value;
      }
    }
  }
}

@mixin responsive-property-rem($property, $size-map) {
  @each $breakpoint, $size in $size-map {
    @if $breakpoint == null {
      #{$property}: rem($size);
    } @else {
      @include breakpoint($breakpoint) {
        #{$property}: rem($size);
      }
    }
  }
}

@mixin responsive-property-em($property, $size-map) {
  @each $breakpoint, $size in $size-map {
    @if $breakpoint == null {
      #{$property}: em($size);
    } @else {
      @include breakpoint($breakpoint) {
        #{$property}: em($size);
      }
    }
  }
}

// responsive font size mixin
@mixin font-size-map($font-size-map) {
  @include responsive-property-rem(font-size, $font-size-map);
}


// breakpoint variables
$lg: 1919px;
$md: 1279px;
$sm: 959px;
$xs: 599px;

$browser-context: 16;
